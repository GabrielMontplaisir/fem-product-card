/* **************** */
/* Variables */
/* **************** */

:root {
  /* Primaries */
  /* As this project occasionally played with opacity for hsl, it was easier to create one variable with just the hsl values */

  --hsl-red: 0, 100%, 67%;
  --hsl-yellow: 39, 100%, 56%;
  --hsl-teal: 166, 100%, 37%;
  --hsl-blue: 234, 85%, 45%;

  /* Then, create a new set of variables with the hsl(var()) inside. */
  --clr-primary-red: hsl(var(--hsl-red));
  --clr-primary-yellow: hsl(var(--hsl-yellow));
  --clr-primary-teal: hsl(var(--hsl-teal));
  --clr-primary-blue: hsl(var(--hsl-blue));

  /* Gradients */
  /* bg */
  --hsl-slate-blue: 252, 100%, 67%;
  --hsl-royal-blue: 241, 81%, 54%;

  --background-gradient: linear-gradient(
    hsl(var(--hsl-slate-blue)),
    hsl(var(--hsl-royal-blue))
  );

  /* circle */
  --hsl-violet-blue: 256, 72%, 46%;
  --hsl-persian-blue: 241, 72%, 46%;

  --circle-gradient: linear-gradient(
    hsl(var(--hsl-violet-blue), 1),
    hsl(var(--hsl-persian-blue), 0)
  );

  /* Neutrals */
  --hsl-white: 0, 0%, 100%;
  --hsl-pale-blue: 221, 100%, 96%;
  --hsl-lavender: 241, 100%, 89%;
  --hsl-gray-blue: 224, 30%, 27%;

  --clr-neutral-white: hsl(var(--hsl-white));
  --clr-neutral-pale-blue: hsl(var(--hsl-pale-blue));
  --clr-neutral-lavender: hsl(var(--hsl-lavender));
  --clr-neutral-gray-blue: hsl(var(--hsl-gray-blue));

  --ff-primary: "Hanken Grotesk", sans-serif;

  --fw-medium: 500;
  --fw-bold: 700;
  --fw-extrabold: 800;

  /* 18px */
  --fs-default: 1.125rem;
}

/* **************** */
/* CSS Reset */
/* **************** */

/* Box Sizing */
*,
*::before,
*::after {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}

/* Remove Margins */
* {
  margin: 0;
  padding: 0;
  font: inherit;
}

/* Make height full monitor height */
html,
body {
  min-height: 100vh;
}

/* Default line height & font smoothing */
body {
  line-height: 1.5;
}

/* Remove list bullets */
ul,
ol {
  list-style: none;
}

/* Make scrolling smooth when clicking an anchor */
html:focus-within {
  scroll-behavior: smooth;
}

/* Match image width */
img,
picture,
video,
canvas,
svg {
  display: block;
  max-width: 100%;
  /* height: auto; */
}

/* Remove bult-in form typography */
input,
button,
textarea,
select {
  font: inherit;
  border: none;
}

/* Maintain style even if the text is too long */
p,
h1,
h2,
h3,
h4,
h5,
h6 {
  overflow-wrap: break-word;
}

a:not([class]) {
  text-decoration-skip-ink: auto;
}

.sr-only:not(:focus):not(:active) {
  clip: rect(0 0 0 0);
  clip-path: inset(50%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

@media (prefers-reduced-motion: reduce) {
  html:focus-within {
    scroll-behavior: auto;
  }

  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

/* ************** */
/*  Variable Font */
/* ************** */

/* See README file for more details about variable fonts. 
* We have to check if the browser @supports the font-variations. Call the font-family, then source.
* Notice how src has two url(). The first uses the updated tech("variations"), but apparently this isn't fully supported.
* As a fallback, we call the second url() with format("woff2-variations")
* For this project, using a variable font was overkill, but I wanted to test it out anyways.
* The font weight can support from 0 to 1000, but since the project only called for 500 - 800, I only called those.
*/
@supports (font-variation-settings: normal) {
  @font-face {
    font-family: "Hanken Grotesk", sans-serif;
    src: url("../assets/fonts/HankenGrotesk-VariableFont_wght.woff2")
        format("woff2") tech("variations"),
      url("../assets/fonts/HankenGrotesk-VariableFont_wght.woff2")
        format("woff2-variations");
    font-weight: 500 800;
  }
}

/* The project initially came with a .ttf variable font. However, they're quite big. It's better to "compress" the file into a .woff2
* using a converter. Check the link in the README files for a converter.
*/

/* *************** */
/* CSS Starts here */
/* *************** */

/* Thankfully, the clamp for font-size was applicable in most areas for the component. */
/* For variable fonts, we use the font-variation-settings attribute. This one only takes "wght". Other variable fonts can take more. */
body {
  font-family: var(--ff-primary);
  font-size: clamp(1rem, 0.85rem + 0.5vw, var(--fs-default));
  background-color: var(--clr-neutral-white);
  color: var(--clr-neutral-gray-blue);
  font-variation-settings: "wght" var(--fw-medium);
}

/* Was easier to call a variable for border radius and adjust as required. */
main {
  --border-radius: 2rem;
  max-width: 46rem;
  display: grid;
}

.result-section {
  display: grid;
  justify-items: center;

  text-align: center;
  line-height: 1.25;

  background: var(--background-gradient);
  color: var(--clr-neutral-lavender);
  border-radius: 0 0 var(--border-radius) var(--border-radius);
  padding: 1.3rem 3rem 2.5rem;
}

/* Apparently, you don't want to create one large media query at the bottom of the css.
* Instead, you want to call multiple where you can adjust the relevant classes as necessary.
*/

@media (min-width: 41.75em) {
  body {
    display: grid;
    place-content: center;
  }

  /* An example where I wanted to call hsl() with an opacity, so had to reference one of the --hsl-* variables I created earlier. */
  main {
    grid-template-columns: 1fr 1fr;
    margin-inline: 1rem;
    border-radius: var(--border-radius);
    overflow: hidden;
    box-shadow: 0.5rem 1rem 3rem hsl(var(--hsl-gray-blue), 0.2);
  }

  .result-section {
    border-radius: var(--border-radius);
    padding: 2.5rem 3.5rem;
  }
}

h1,
h2 {
  font-size: clamp(var(--fs-default), var(--fs-default) + 0.5vw, 1.5rem);
  font-variation-settings: "wght" var(--fw-extrabold);
}

/* The aspect-ratio is important here so we have a nice "perfect circle" (imagine a square with a 50% border radius). */
.score {
  display: grid;
  width: 9rem;
  place-content: center;
  margin: 1.25rem;

  font-variation-settings: "wght" var(--fw-bold);
  color: hsl(var(--hsl-lavender), 0.5);

  background: var(--circle-gradient);
  border-radius: 50%;
  aspect-ratio: 1 / 1;
}

.score span {
  font-variation-settings: "wght" var(--fw-extrabold);
  font-size: clamp(3.5rem, 3.5rem + 1vw, 6rem);
  color: var(--clr-neutral-white);
}

@media (min-width: 41.75em) {
  .score {
    width: 12rem;
    line-height: 1.1;
  }
}

.rank {
  padding-bottom: 0.75rem;

  font-variation-settings: "wght" var(--fw-extrabold);
  font-size: clamp(1.5rem, 1.3rem + 1vw, 2rem);
  color: var(--clr-neutral-pale-blue);
}

.summary-section {
  padding: 1.5rem 1.75rem 0;
}

h2 {
  font-variation-settings: "wght" var(--fw-bold);
  padding-bottom: 1.5rem;
}

@media (min-width: 41.75em) {
  .summary-section {
    padding: 2.5rem;
  }
}

.categories-container {
  display: grid;
  gap: 1rem;
}

.categories-container p {
  font-variation-settings: "wght" var(--fw-bold);
  color: var(--clr-neutral-gray-blue);
}

.categories-container span {
  font-variation-settings: "wght" var(--fw-bold);
  color: hsl(var(--hsl-gray-blue), 0.5);
}

/* These are important to determine the colours of the list items. As I'm calling the JSON and using the category as the class name, 
* I had to capitalize the class here. You typically don't want to capitalize a class, but I didn't really have a choice unless I modified the
* JSON file instead.
*/
.Reaction {
  background-color: hsl(var(--hsl-red), 0.05);
  color: var(--clr-primary-red);
}

.Memory {
  background-color: hsl(var(--hsl-yellow), 0.05);
  color: var(--clr-primary-yellow);
}

.Verbal {
  background-color: hsl(var(--hsl-teal), 0.05);
  color: var(--clr-primary-teal);
}

.Visual {
  background-color: hsl(var(--hsl-blue), 0.05);
  color: var(--clr-primary-blue);
}

button {
  width: 100%;
  margin-block: 1.5rem;
  padding: 1rem;

  background: var(--clr-neutral-gray-blue);
  border-radius: 2rem;

  color: var(--clr-neutral-pale-blue);
  font-variation-settings: "wght" var(--fw-bold);
  text-align: center;
}

button:is(:hover, :focus-visible) {
  background: var(--background-gradient);
}

/* Create a reverse linear gradient if the button is active. I don't know if there is a "reverse" function in CSS to simply call the var(). */
button:active {
  background: linear-gradient(
    to top,
    hsl(var(--hsl-slate-blue)),
    hsl(var(--hsl-royal-blue))
  );
}
